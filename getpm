#!/system/bin/sh
grep_prop() {
        getprop | grep -Fw $1 | cut -d":" -f2 | cut -d" " -f2 | cut -d"[" -f2 | cut -d"]" -f1
}
ABI=$(grep_prop ro.product.cpu.abi)
ABI2=$(grep_prop ro.product.cpu.abi2)
ABILONG=$(grep_prop ro.product.cpu.abi)
ARCH=arm
ARCH32=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; ARCH32=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; ARCH32=arm; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; ARCH32=x86; IS64BIT=true; fi;
# Colors
G='\e[01;32m'           # GREEN TEXT
R='\e[01;31m'           # RED TEXT
Y='\e[01;33m'           # YELLOW TEXT
B='\e[01;34m'           # BLUE TEXT
V='\e[01;35m'           # VIOLET TEXT
Bl='\e[01;30m'          # BLACK TEXT
C='\e[01;36m'           # CYAN TEXT
W='\e[01;37m'           # WHITE TEXT
BGBL='\e[1;30;47m'      # Background W Text Bl
N='\e[0m'                       # How to use (example): echo "${G}example${N}"
loadBar=' '                     # Load UI
# Remove color codes if -nc or in ADB Shell
[ -n "$1" -a "$1" == "-nc" ] && shift && NC=true
[ "$NC" -o -n "$ANDROID_SOCKET_adbd" ] && {
  G=''; R=''; Y=''; B=''; V=''; Bl=''; C=''; W=''; N=''; BGBL=''; loadBar='=';
}
repo_url="https://deb.debian.org/debian"
check_source() {
	echo "[i] Checking sources..."
	if curl --silent ${repo_url}/dists/stable/Release > /dev/null; then
		echo "[i] Source is functional."
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo all) ]; then
		echo "${V}[W] Source doesn't support arch: all"
		echo "[W] This means that each program has it's own architecture,"
		echo "[W] and it could not support your system. (Potentially.)${N}"
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo $ARCH) ]; then
		echo "${R}[E] Source doesn't support your arch: $ARCH"
		if [ $ARCH == "arm*" ]; then
			echo "[E] This is normal, as most sources don't support ARM-based devices.${N}"
		else
			echo "[E] This is not normal, as most sources support x86 x64_86 devices.${N}"
		fi
		exit 1
	fi
	echo "${G}[✓] Check has been done sucessfully!${N}"
}
write_packs() {
	echo "[i] Getting available packages for ${ARCH}..."
	curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d | grep -F "Package: " | cut -d":" -f2 | cut -d" " -f2 | tee packages.list > /dev/null
	echo "[i] Gettung available packages for all..."
	curl --silent ${repo_url}/dists/stable/main/binary-all/Packages.gz | gzip -d | grep -i "Package: " | cut -d":" -f2 | cut -d" " -f2 | tee -a packages.list > /dev/null
	echo "${G}[✓] Download done!${N}"
}
download() {
	while IFS= read -r line; do
		found="0"
		if [[ $line == "Package: ${1}" ]]; then
			echo "[i] Package $(echo $line | cut -d":" -f2 | cut -d" " -f2) found!"
        		while IFS= read -r next_line; do
            			[[ -z $next_line ]] && break
				if [[ $next_line == "Depends:"* ]]; then
					echo "[i] Dependencies found. Saving..."
					echo "$next_line" | cut -d":" -f2 > depends_${1}.list
				fi
            			if [[ $next_line == "Filename"* ]]; then
					echo "[i] Link is: ${repo_url}/$(echo $next_line | cut -d":" -f2 | cut -d" " -f2)"
					found="1"
					echo "[i] Saving..."
					echo "${repo_url}/$(echo $next_line | cut -d":" -f2 | cut -d" " -f2)" > main_pack_${1}.list
					break
				fi
        		done
		break
    		fi
	done
}
download_comp() {
	echo "[i] Checking..."
	{ curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d; curl --silent ${repo_url}/dists/stable/main/binary-all/Packages.gz | gzip -d; } | download $1
	if [ "$found" == "0" ]; then
		echo "[E] Package ${1} has not been found."
		exit 1
	fi
}
download_batch() {
	list=' '
	for i in $(seq $(( $(grep -o "," $1 | wc -w) + 1 ))); do
        	list+=$(cat $1 | cut -d: -f2 | cut -d"," -f$i | cut -d" " -f2 >&1)' '
	done
	for i in ${list[@]}; do
		download_comp $i
	done
}

case $1 in
	--create-pkg-list|-pkg) write_packs ;;
	--check-source|-chk) check_source ;;
	--download|-d) if [ -t 0 ]; then download_comp $2; else read pak; download_comp $pak; fi ;;
	--download-batch|-b) download_batch $2 ;;
esac
