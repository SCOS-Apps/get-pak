#!/bin/env sh
# Set your arch here depending on the output of the command: uname -i
# If it comes out as uknown, then it is most likely ARM (AKA ARMv7, ARMv7 or ARMHF) or arm64 (AKA Aarch64 or ARMv8).
# Check your CPU online for info (or just use the command arch).
# If you use arch, then you need to translate the output to actual info:
# aarch64 = arm64
# arm = armhf
# x86, i386 = i386
# x86_64, amd64 = amd64
# Any other you'll need to translate yourself.
# Multi-arch is not supported, and it only gets packages from the stable repo, and main sub-repo.
ARCH=arm64
repo_url="https://deb.debian.org/debian"

# Colors
G='\e[01;32m'           # GREEN TEXT
R='\e[01;31m'           # RED TEXT
Y='\e[01;33m'           # YELLOW TEXT
B='\e[01;34m'           # BLUE TEXT
V='\e[01;35m'           # VIOLET TEXT
Bl='\e[01;30m'          # BLACK TEXT
C='\e[01;36m'           # CYAN TEXT
W='\e[01;37m'           # WHITE TEXT
BGBL='\e[1;30;47m'      # Background W Text Bl
N='\e[0m'               # How to use (example): echo "${G}example${N}"
check_source() {
	echo "[i] Checking sources..."
	if curl --silent ${repo_url}/dists/stable/Release > /dev/null; then
		echo "[i] Source is functional."
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo all) ]; then
		echo "${V}[W] Source doesn't support arch: all"
		echo "[W] This means that each program has it's own architecture,"
		echo "[W] and it could not support your system. (Potentially.)${N}"
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo $ARCH) ]; then
		echo "${R}[E] Source doesn't support your arch: $ARCH"
		if [ $ARCH == "arm*" ]; then
			echo "[E] This is normal, as most sources don't support ARM-based devices.${N}"
		else
			echo "[E] This is not normal, as most sources support x86 x64_86 devices.${N}"
		fi
		exit 1
	fi
	echo "${G}[✓] Check has been done sucessfully!${N}"
}
write_packs() {
	if [ ! "$1" == "--all" ]; then
		echo "[i] Getting available packages for ${ARCH}..."
		curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d | grep -F "Package: " | cut -d":" -f2 | cut -d" " -f2 | tee packages.list > /dev/null
		echo "[i] Getting available packages for all..."
		curl --silent ${repo_url}/dists/stable/main/binary-all/Packages.gz | gzip -d | grep -i "Package: " | cut -d":" -f2 | cut -d" " -f2 | tee -a packages.list > /dev/null
		echo "${G}[✓] Download done!${N}"
	else
		echo "[i] Getting available packages for ${ARCH}..."
                curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d | tee packages_full.list > /dev/null
                echo "[i] Getting available packages for all..."
                curl --silent ${repo_url}/dists/stable/main/binary-all/Packages.gz | gzip -d | tee -a packages_full.list > /dev/null
                echo "${G}[✓] Download done!${N}"
	fi
}
pak_to_awk() {
	out="$(awk -v pack="${1}" '$0 == "Package: " pack {flag=1} flag; /^$/ {flag=0}' packages_full.list)"
	echo "$out"
}
download_awk() {
	if [ ! -f "packages_full.list" ]; then echo "[E] Could not find packages_full.list file. Run getpm -pkg --all first!"; exit 1; fi
        if [ ! -z "$(cat packages_full.list | grep -Fwo "Package: ${1}")" ]; then echo -n ""; else echo "[E] Package ${1} doesn't exist."; exit 1; fi
        found="0"
       	for i in "$(pak_to_awk $1)"; do
		if [ ! -e "dep_$(echo "${i}" | grep "Package ${1}" | cut -d":" -f2 | cut -d" " -f2).list" ]; then echo -n; else found="1"; echo "[W] Package already exists, skipping..."; continue; fi
                if echo "${i}" | grep "Package: ${1}" > /dev/null; then
                        echo "[i] Package $1 found!"
                        found="1"
		fi
                if echo "${i}" | grep "Depends:*" > /dev/null; then
                        echo "[i] $(echo "${i}" | grep "Depends:*")"
                        awk -v pack="${1}" '$0 == "Package: " pack {flag=1} flag; /^$/ {flag=0}' packages_full.list | grep "Depends:*" | sed 's/[(*>=*)]//g' | cut -d":" -f2 > dep_${1}.list
                        download_batch dep_${1}.list
                fi
                if echo "${i}" | grep "Filename:*" > /dev/null; then
#                        echo "[i] Link is: ${repo_url}/$(echo "${i}" | grep "Filename:*" | cut -d":" -f2 | cut -d" " -f2)"
#                        echo "[i] Saving..."
                        echo "${repo_url}/$(echo "${i}" | grep "Filename:*" | cut -d":" -f2 | cut -d" " -f2)" > main_pack_${1}.list
                        continue
                fi
                continue
	done
}
download() { # Not used, remove later.
	while true; do
		if [ ! -f "packages_full.list" ]; then echo "[E] Could not find packages_full.list file. Run getpm -pkg --all first!"; exit 1; fi
		if [ ! -z "$(cat packages_full.list | grep -Fwo "Package: ${1}")" ]; then echo -n ""; else echo "[E] Package ${1} doesn't exist."; exit 1; fi
		found="0"
		awk '$0 == "Package: ${1}" {flag=1} flag; /^$/ {flag=0}' packages_full.list | while IFS= read i; do
			if [ -f "main_pack_$(echo $i | cut -d":" -f2 | cut -d" " -f2).list" ]; then break; fi
                	if [[ $i == "Package: ${1}" ]]; then
                        	echo "[i] Package $(echo $line | cut -d":" -f2 | cut -d" " -f2) found!"
				found="1"
                        	while IFS= read -r next_line; do
                        	        [[ -z $next_line ]] && break
                        	        if [[ $next_line == "Depends:"* ]]; then
                        	                echo "[i] Dependencies found. Saving and Downloading..."
                                	        echo "[i] $next_line"
                                	        echo "$next_line" | cut -d":" -f2 > depends_${1}.list
                                	        download_batch depends_${1}.list
                                	fi
                                	if [[ $next_line == "Filename"* ]]; then
                                	        echo "[i] Link is: ${repo_url}/$(echo $next_line | cut -d":" -f2 | cut -d" " -f2)"
                                        	echo "[i] Saving..."
                                        	echo "${repo_url}/$(echo $next_line | cut -d":" -f2 | cut -d" " -f2)" > main_pack_${1}.list
                                        	break
                                	fi
                        	done
                		break
                	fi
		done
	done
}
download_comp() {
	found="0"
	echo "[i] Checking..."
	download_awk $1
	if [ "$found" == "0" ]; then
		echo "[E] Package ${1} has not been found."
	fi
}
download_batch() {
	list=' '
	for i in $(seq $(( $(grep -o "," $1 | wc -w) ))); do
        	list+=$(cat $1 | cut -d"," -f$i | cut -d" " -f2 >&1)' '
	done
	for i in ${list[@]}; do
		download_comp $i
	done
}

case $1 in
	--create-pkg-list|-pkg) if [ "$2" == "--all" ]; then write_packs --all; else write_packs; fi ;;
	--check-source|-chk) check_source ;;
	--download|-d) if [ -z "$2" ]; then echo "[E] --download requires an argument."; exit 1; elif [ -t 0 ]; then download_comp $2; else read pak; download_comp $pak; fi ;;
	--download-batch|-b) download_batch $2 ;;
esac
