#!/bin/sh
# Set your arch here depending on the output of the command: uname -i
# If it comes out as uknown, then it is most likely ARM (AKA ARMv7, ARMv7 or ARMHF) or arm64 (AKA Aarch64 or ARMv8).
# Check your CPU online for info (or just use the command arch).
# If you use arch, then you need to translate the output to actual info:
# aarch64 = arm64
# arm = armhf
# x86, i386 = i386
# x86_64, amd64 = amd64
# Any other you'll need to translate yourself.
# Multi-arch is not supported, and it only gets packages from the stable repo, and main sub-repo, as it cannot detect others (for now).
ARCH=arm64
repo_url="https://deb.debian.org/debian"

# Colors
G="\033[01;32m"
R="\033[01;31m"
Y="\033[01;33m"
B="\033[01;34m"
V="\033[01;35m"
Bl="\033[01;30m"
C="\033[01;36m"
W="\033[01;37m"
BGBL="\033[1;30;47m"
N="\033[0m"
loadBar=' '

debug() {
	if [ "${DEBUG}" = "1" ]; then
		if [ -t 0 ]
		then
		echo "[DEBUG${2}] $1"
		else
		echo "[DEBUG_STDIN${1}] $(read a; echo -n "$a"; unset a)"
		fi
	fi
}
help() {
	help="SCOS Get-Pak Package Manager v1.0

Currently using repo${G}: ${R}$repo_url${N}
Currently using arch${G}: ${R}$ARCH${N}

Commands${G}:
	${V}--help ${G}|${V} -h${N}
		Show this dialog.
	${V}--check-source ${G}|${V} -chk${N}
		Check if source is functional
	${V}--create-pkg-list ${G}|${V} -pkg${N}
		Creates packages-full.list file to get packs.
	${V}--download ${G}|${V} -d${N}
		Downloads packages and their dependencies.
	${V}--download-batch ${G}|${V} -b${N}
		Downloads from dependencies lists.
"
	echo -n "${help}"
}
check_source() {
	echo "[i] Current source: $repo_url"
	echo "[i] Checking sources..."
	if curl --silent ${repo_url}/dists/stable/Release > /dev/null; then
		echo "[i] Source is functional."
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo all) ]; then
		echo "${V}[W] Source doesn't support arch: all"
		echo "[W] This means that each program has it's own architecture,"
		echo "[W] and it could not support your system. (Potentially.)${N}"
	fi
	if [ -z $(curl --silent ${repo_url}/dists/stable/Release | grep -i "Architectures:" | cut -d: -f2 | grep -Fwo $ARCH) ]; then
		echo "${R}[E] Source doesn't support your arch: $ARCH"
		if [ $ARCH == "arm*" ]; then
			echo "${R}[E] This is normal, as most sources don't support ARM-based devices.${N}"
		else
			echo "${R}[E] This is not normal, as most sources support x86 x64_86 devices.${N}"
		fi
		exit 1
	fi
	echo "${G}[✓] Check has been done sucessfully!${N}"
}
write_packs() {
	echo "[i] Getting available packages for ${ARCH}..."
        curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d | tee packages_full.list > /dev/null
        echo "${G}[✓] Download done!${N}"
}
setup_var() {
	document="$(curl --silent ${repo_url}/dists/stable/main/binary-${ARCH}/Packages.gz | gzip -d)"
}
pak_to_awk() {
	out="$(awk -v pack="${1}" '$0 == "Package: " pack {flag=1} flag; /^$/ {flag=0}' packages_full.list)"
	echo "$out"
}
pak_to_awk_var() {
	out="$(echo "$document" | awk -v pack="${1}" '$0 == "Package: " pack {flag=1} flag; /^$/ {flag=0}')"
	echo "$out"
}
download_awk() {
#	if [ ! -f "packages_full.list" ]; then echo "[E] Could not find packages_full.list file. Run getpm -pkg --all first!"; exit 1; fi
        if pak_to_awk_var $1 | grep -Fwo "Package: ${1}" | debug "_PACKAGE"; then echo -n ""; else echo "${R}[E] Package ${1} doesn't exist.${N}"; exit 1; fi
        found="0"
       	for i in "$(pak_to_awk_var $1)"; do
                if echo "${i}" | grep "Package: ${1}" > /dev/null; then
                        echo "[i] Package $1 found!"
                        found="1"
		fi
		debug "debug sym1 $1" "_INFO"
                if echo "${i}" | grep "Depends:*" > /dev/null; then
                        echo "[i] $(echo "${i}" | grep "Depends:*")"
                        echo "$document" | awk -v pack="${1}" '$0 == "Package: " pack {flag=1} flag; /^$/ {flag=0}' | grep "Depends:*" | sed 's/[(*>=*)]//g' | sed 's/*Depends: //' | tee dep_${1}.list > /dev/null
                        download_batch dep_${1}.list
                fi
		debug "$i" "_DOC"
                echo "${repo_url}/$(pak_to_awk_var $1 | grep "Filename:" | sed 's/Filename: //')" |  tee -a main_paks.list >/dev/null
		debug "debug sym3 $1" "_INFO"
	done
}
download_comp() {
	found="0"
	if [ ! -f "dep_${1}.list" ]; then
		download_awk $1
	else found="1"; fi
	if [ "$found" -eq "0" ]; then
		echo "${R}[E] Package ${1} has not been found.${N}"
		exit 1
	fi
}
download_batch() {
	list=' '
	for i in $(seq $(( $(grep -o "," $1 | wc -w) + 1 ))); do
        	list="${list}$(cat $1 | cut -d"," -f$i | cut -d" " -f2 >&1)"' '
	done
	debug "debug sym $list" "_DEP"
	for i in ${list}; do
		download_comp $i
	done
}

case $1 in
	--help|-h) help ;;
	--create-pkg-list|-pkg) write_packs ;;
	--check-source|-chk) check_source ;;
	--download|-d) if [ -z "$2" ]; then echo "[E] --download requires an argument."; exit 1; elif [ -t 0 ]; then setup_var; download_comp $2; else read pak; download_comp $pak; fi ;;
	--download-batch|-b) download_batch $2 ;;
	*) if [ -z "$1" ]; then help; exit 1; else echo "[E] Command not supported: $1"; exit 1; fi
esac
